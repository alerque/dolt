name: Systab Benchmarks
on:
  repository_dispatch:
    types: [ benchmark-merge ]
env:
  SCRIPT_DIR: '.github/scripts/merge-perf'
  RESULT_TABLE_NAME: 'merge_perf_results'
  DOLTHUB_DB: 'import-perf/merge-perf'
jobs:
  bench:
    name: Benchmark
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      id: go
      uses: actions/setup-go@v3
      with:
        go-version: ^1.19

    - name: Setup Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Dolt version
      id: version
      run: |
        version=${{ github.event.client_payload.version }}

    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.client_payload.version }}

    - name: Install dolt
      working-directory: ./go
      run: go install ./cmd/dolt

    - name: Run bench
      id: bench
      working-directory: $GITHUB_WORKSPACE
      run: |
        DATADIR=$GITHUB_WORKSPACE/data
        TABLE_NUM=2
        ROW_NUM=1000000
        ADD_NUM=60000
        python ${{ env.SCRIPT_DIR }}/data.py $DATADIR $TABLE_NUM $ROW_NUM $ADD_NUM

        TMPDIR=$GITHUB_WORKSPACE/tmp
        ./${{ env.SCRIPT_DIR}}/setup.sh $TMPDIR $DATADIR

        TIMES=$GITHUB_WORKSPACE/time.log
        cd $TMPDIR
        time dolt merge main &>$TIMES

        RESULTS=$GITHUB_WORKSPACE/results.sql

        echo "time test"
        time -f "%E" sleep 1

        seconds=$(sed -E 's/real\s+0m([0-9]*\.[0-9]*)s/\1/' < $TIMES)
        minutes=$(sed -E  's/real\s+([0-9]*)m[0-9]*\.[0-9]*s/\1/' < $TIMES)
        latency=$(python -c "print($minutes+($seconds/60.0))")

        echo "CREATE TABLE ${{env.RESULT_TABLE_NAME }} (name varchar(20) primary key, tables int, rows int, adds int, conflicts int, fks bool, latency float);" >> $RESULTS
        echo "INSERT INTO ${{ env.RESULT_TABLE_NAME }} values ('1m rows, 100k conflicts', 2, $NUM_ROWS, $NUM_ADDS, $NUM_ADDS, true, $latency);" >> $RESULTS

        echo "::set-output name=result_path::$RESULTS"

    - name: Report
      id: report
      run: |
        gw=$GITHUB_WORKSPACE
        in="${{ steps.bench.outputs.result_path }}"
        query="select name, latency from ${{ env.RESULT_TABLE_NAME }}"
        summaryq="select avg(latency) as avg from ${{ env.RESULT_TABLE_NAME }}"

        out="$gw/results.csv"
        dolt_dir="$gw/systab-perf"

        dolt config --global --add user.email "systab-perf@dolthub.com"
        dolt config --global --add user.name "systab-perf"

        echo '${{ secrets.DOLTHUB_IMPORT_PERF_CREDS_VALUE }}' | dolt creds import
        dolt clone ${{ env.DOLTHUB_DB }} "$dolt_dir"

        cd "$dolt_dir"

        branch="${{ github.event.client_payload.commit_to_branch }}"
        # checkout branch
        if [ -z $(dolt sql -q "select 1 from dolt_branches where name = '$branch';") ]; then
          dolt checkout -b $branch
        else
          dolt checkout $branch
        fi

        dolt sql -q "drop table if exists sysbench_results"

        # load results
        dolt sql < "$in"

        # push results to dolthub
        dolt add sysbench_results
        dolt commit -m "CI commit"
        dolt push -f origin $branch

        # generate report
        dolt sql -r csv < "$query" > "$out"

        cat "$out"
        echo "::set-output name=report_path::$out"

        avg=$(dolt sql -r csv < "$summaryq" | tail -1)
        echo "::set-output name=avg::$avg"

    - name: Format Results
      id: html
      if: ${{ github.event.client_payload.email_recipient }} != ""
      run: |
        gw="$GITHUB_WORKSPACE"
        in="${{ steps.report.outputs.report_path }}"
        out="$gw/results.html"

        echo "<table>" > "$out"
        print_header=true
        while read line; do
          if "$print_header"; then
            echo "  <tr><th>${line//,/</th><th>}</th></tr>" >> "$out"
            print_header=false
            continue
          fi
          echo "  <tr><td>${line//,/</td><td>}</td></tr>" >> "$out"
        done < "$in"
        echo "</table>" >> "$out"

        avg="${{ steps.report.outputs.avg }}"
        echo "<table><tr><th>Average</th></tr><tr><td>$avg</tr></td></table>" >> "$out"

        cat "$out"
        echo "::set-output name=html::$(echo $out)"

    - name: Configure AWS Credentials
      if: ${{ github.event.client_payload.email_recipient }} != ""
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Send Email
      uses: ./.github/actions/ses-email-action
      if: ${{ github.event.client_payload.email_recipient }} != ""
      with:
        region: us-west-2
        toAddresses: '["${{ github.event.client_payload.email_recipient }}"]'
        subject: 'System Table Performance Benchmarks: ${{ github.event.client_payload.version }}'
        bodyPath: ${{ steps.html.outputs.html }}
        template: 'SysbenchTemplate'

    - name: Read CSV
      if: ${{ github.event.client_payload.issue_id }} != ""
      id: csv
      uses: juliangruber/read-file-action@v1
      with:
        path: "${{ steps.report.outputs.report_path }}"

    - name: Create MD
      if: ${{ github.event.client_payload.issue_id }} != ""
      uses: petems/csv-to-md-table-action@master
      id: md
      with:
        csvinput: ${{ steps.csv.outputs.content }}

    - uses: mshick/add-pr-comment@v2
      if: ${{ github.event.client_payload.issue_id }} != ""
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        issue: ${{ github.event.client_payload.issue_id }}
        message-failure: systab benchmark failed
        message-cancelled: systab benchmark cancelled
        allow-repeats: true
        message: |
          @${{ github.event.client_payload.actor }} __DOLT__
          ${{ steps.md.outputs.markdown-table }}
